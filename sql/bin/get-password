#!/usr/bin/perl

# To successfully create a new account, this script must be run from
# somewhere with the user's Kerberos tickets.

use strict;
use JSON;

my $user = $ARGV[0] || $ENV{USER};

sub getMyCnfInfo($) {
  my $path = shift;
  open(MYCNF, $path) or return;
  my $section;
  my %result = (host => "sql.mit.edu", user => $user);
  while (<MYCNF>) {
    $section = $1 if /\[([^]]+)\]/;
    if (/(\w+)\s*=\s*([^\r\n]*)/) {
      my ($key, $value) = ($1, $2);
      if ($section eq "mysql" or $section eq "client") {
	$result{$key} = $value;
      }
    }
  }
  return \%result;
}
my $cnfPath = "/mit/$user/.sql/my.cnf";
my $cnfinfo = getMyCnfInfo($cnfPath);

if ($cnfinfo and $cnfinfo->{'password'}) {
  print "$cnfinfo->{'host'}\t$cnfinfo->{'user'}\t$cnfinfo->{'password'}\n";
  exit;
}

$ENV{"PATH"} = $ENV{"PATH"} . ":/mit/remctl/bin";
my $out = `remctl sql.mit.edu account create $user`;

$out = decode_json($out);

if ($out->{"status"} == 0) {
  mkdir "/mit/$user/.sql", 0700;
  system("fs sa /mit/$user/.sql system:anyuser none system:authuser none daemon.scripts write daemon.sql write");
  symlink "/mit/$user/.sql/my.cnf", "/mit/$user/.my.cnf";

  open(MYCNF, ">", $cnfPath) or die "Can't write login information: $!";
  print MYCNF "[client]\nhost=sql.mit.edu\nuser=$user\npassword=$out->{'password'}\n";
  close(MYCNF) or die "Can't write login information: $!";
  print "sql.mit.edu\t$user\t$out->{'password'}\n";
} else {
  die $out->{"error"};
}
